<snippet>
<content><![CDATA[
// by @akhilsharmaa 

#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;  
using namespace __gnu_pbds;

typedef __gnu_pbds::tree<int, __gnu_pbds::null_type, less<int>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update> ordered_set;

#define pb            push_back
#define endl          "\n";  
#define int           long long int
#define ff            first 
#define ss            second 
#define FAST_IO       cin.tie(NULL); ios_base::sync_with_stdio(false);

#define printV(v)     for(auto&&i:v)cout<<i<<' ';cout<<"\n";
#define debugV(v)     cerr<<#v<<"-> "; for(auto&&i:v)cerr<<i<<' ';cerr<<"\n";
#define scanV(v)      for(auto&&i:v)cin >> i;
#define yN(ok)        cout << (ok? "YES": "NO") << endl;
#define tF(ok)        cout << (ok? "TRUE": "FALSE") << endl;

#define debugln(n)    cerr <<#n<<":"<<n<<endl;
#define debug(n)      cerr <<#n<<":"<<n<<' ';
#define pln(n)        cout << n << '\n';
#define printMP(mp)   cout << #mp << "-> ";for(auto [i, j]: mp)cout<<i<<':'<<j<<", ";
#define debugMP(mp)   cerr << #mp << "-> ";for(auto [i, j]: mp)cerr<<i<<':'<<j<<", ";cerr<<"\n";

#define loop(i,j,n)   for(int i=(j);i<=((int)n);++i)
#define CLR(v)        memset((v),0,sizeof(v))
#define all(v)        v.begin(), v.end()
#define sz(v)         v.size()

#define gcd(a, b)     abs(__gcd(a, b))
#define lcm(a, b)     (a*b)/gcd(a, b)

#define mod(n)       n % MOD
#define add(a, b)    mod(a) + mod(b) % MOD
#define sub(a, b)    mod(a) - mod(b) % MOD
#define mul(a, b)    mod(a) * mod(b) % MOD

#define amax(_x, _y)  _x = max(_x, _y);
#define amin(_x, _y)  _x = min(_x, _y);

const int INF = 1e18 + 7;
const int MOD = 1e9 + 7;
const int N =  2e5+7;


void solve(int ts, int ttlts){ 

    ${2}
    
}


signed main(){
  
  FAST_IO; // fast-io
  
  int t = 1;
    
  // #ifndef ONLINE_JUDGE
    ${1:cin >> t;}
  // #endif
  
  
  for(int ts = 1; ts <= t; ts++){
    solve(ts, t);
  }
  
  
  return 0;
}

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>template-akhilsharmaa</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>

</snippet>