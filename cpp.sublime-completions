{
	"scope":"source.c++", 
	"completions":
	[
		{
			"trigger":"vvi", 
			"contents": "vector<vector<int>>  ${1:grid}(${2:n} , vector<int>(${3:m}, 0));", 
			"annotation" : "vector<vector<int>>",
		},
		
		{
			"trigger":"vii", 
			"contents": "vector<pair<int, int>>  ${1:a}($2);", 
			"annotation" : "vector<pair<int, int>>"
		},
		
		{	
			"trigger":"vi", 
			"contents": "vector<int> ${1:v}($2);",
			"annotation" : "vector<int>"
		},
		
		{	
			"trigger":"vpii", 
			"contents": "vector<pair<int, int>> ${1:vii}($2);",
			"annotation" : "vector<pair<int, int>> vii(n)"
		},
		
		{
			"trigger":"si", 
			"contents": "set<int> ${1:st};",
			"annotation" : "set<int>"
		},
		
		
		{	
			"trigger":"mii", 
			"contents": "map<int,int> ${1:mp};",
			"annotation" : "map<int,int>"
		},
		
		
		{	
			"trigger":"msi", 
			"contents": "map<string,int> ${1:mp};", 
			"annotation" : "map<string,int>"
		},
		
		
		{	
			"trigger":"mi",
			"contents": "multiset<int> ${1:mst};", 
			"annotation" : "multiset<int>"
		},
		
		
		{	
			"trigger":"cout",
			"contents": "cout << $1 << \"${2:\\n}\";",
			"annotation" : "cout << << \"\n\" "
		}, 
		
		{	
			"trigger":"maxHeap",
			"contents": "priority_queue <int> maxHeap;",
			"annotation" : "maxHeap"
		}, 
		
		{	
			"trigger":"minHeap",
			"contents": "priority_queue <int, vector<int>, greater<int> > minHeap;",
			"annotation" : "minHeap"
		},
		
		{	
			"trigger":"powerOf2",
			"contents": "\nbool powerOf2(int n){\n  if(n <= 0)return 0;\n  return (n & (n-1)) == 0;\n}",
			"annotation" : "powerOf2(n)"
		},
		{	
			"trigger":"numberOfSetBits",
			"contents": "int numberOfSetBits(int n){\n  return __builtin_popcountll(n);\n}",
			"annotation" : "numberOfSetBits(n):O(1)"
		},
		{	
			"trigger":"pii",
			"contents": "pair<int, int>",
			"annotation" : "pair<int, int>"
		},
		
		{
			"trigger":"accumlate sum",
			"contents": "accumulate(${1:v}.begin(), ${1:v}.end(), 0LL);", 
			"annotation" : "vector<vector<int>>",
		},
		
		
		{
			"trigger":"string str; cin >> n",
			"contents": "string str; \ncin >> str;", 
			"annotation" : "string str; cin >> str;",
		},
		
		
		{
			"trigger":"priority_queue",
			"contents": "priority_queue<int, vector<int>, ${1:greater<int>}> ${2:pq};", 
			"annotation" : "Priority Queue",
		},
		
		
		
		// ........................Programs....................
		
		{	
			"trigger":"input-vector",
			"contents": "int n; cin >> n;\nvector<int> v(n);\n\nfor(int i=0; i<n; ++i)\n\tcin >> v[i];",
			"annotation" : "int n; cin >> n;  vector<int> v(n); for(int i=0; i<n; ++i)\ncin >> v[i];"
		},
		
		
		{	
			"trigger":"binary-search-isPossible int lo",
			"contents": "\nint lo = 0, hi = MOD; \n\n \nwhile(lo <= hi){	\n\t      int mid = lo+(hi-lo)/2; \n\t       \n\t      if(isPossible()){ \n\t        hi = mid-1; \n\t         \n\t      }else { \n\t        lo = mid+1; \n\t      } \n\t       \n}",
			"annotation" : "while(lo <= hi){  int mid = (lo + hi)/2;"
		},
		
		{	
			"trigger":"Segment-tree",
			"contents": "\nclass Segment{\npublic:\n    vector<int> seg;\n    int n;\n  Segment(vector<int> &a){\n      this->n = a.size();\n      seg.resize(4*n);\n      build(a,0,0,n-1);\n  }\n \n  void build(vector<int> &a,int idx,int left,int right){\n      if(left == right){\n          seg[idx] = a[left];\n          return;\n      }\n      int mid = (left+right)/2;\n      build(a,2*idx+1,left,mid);\n      build(a,2*idx+2,mid+1,right);\n      seg[idx] = seg[2*idx+1] + seg[2*idx+2];\n  }\n    \n    int query(int l,int r,int idx = 0,int left = 0,int right = -1){\n        if(right == -1)right = n-1;\n        if(left>r || right < l)return 0;\n      if(left>=l && right<=r)return seg[idx];\n      int mid = (left + right)/2;\n      return (query(l,r,2*idx+1,left,mid) + query(l,r,2*idx+2,mid+1,right));\n  }\n \n  void update(int pos,int val,int idx = 0,int left = 0,int right = -1){\n      if(right == -1)right = n-1;\n      if(left == right){\n          seg[idx] = val;\n          return;\n      }\n      int mid = (left + right)/2;\n      if(pos <= mid) update(pos,val,idx*2+1,left,mid);\n      else update(pos,val,idx*2+2,mid+1,right);\n      seg[idx] = seg[2*idx+1] + seg[2*idx+2];\n  }\n\n};",
			"annotation" : "class segment{public..."
		},
		
		{	
			"trigger":"is_prime SieveOfEratosthenes",
			"contents": "\nint n; \nvector<bool> is_prime(n+1, true); \n \nis_prime[0] = is_prime[1] = false; \n \n \nfor (int i = 2; i <= n; i++) { \n\t    if (is_prime[i] && (long long)i * i <= n) { \n\t\t        for (int j = i * i; j <= n; j += i) \n\t\t\t         is_prime[j] = false; \n\t    } \n}",
			"annotation" : "is_prime Sieve of Eratosthenes"
		},
		
		
		{	
			"trigger":"GP Sum (a, r, n){",
			"contents": "\nint GP_Sum(int a, int r, int n){\n\t return ((a*binpow(r, n)) - a)/(r-1);\n}",
			"annotation" : "Sum of GP a^1 + a^2 + a^3 + ... + a^n"
		},
		
		{	
			"trigger":"binpow Binary-Exponentiation binary power",
			"contents": "\nlong long binpow(long long a, long long b) { \n\t     long long res = 1; \n\t     while (b > 0) { \n\t \t    if (b & 1) \n\t \t\t        res = res * a; \n\t \t    a = a * a; \n\t \t    b >>= 1; \n\t \t} \n\t     return res; \n}", 
			"annotation" : "binpow(a, n): O(logN)"
		},
	]
}





