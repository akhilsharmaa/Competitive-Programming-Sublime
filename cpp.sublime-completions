{
	"scope":"source.c++", 
	"completions":
	[
		{
			"trigger":"vvi", 
			"contents": "vector<vector<int>>  ${1:grid}(${2:n} , vector<int>(${3:m}, 0));", 
			"annotation" : "vector<vector<int>>",
		},
		
		{
			"trigger":"vii", 
			"contents": "vector<pii>  ${1:a}($2);", 
			"annotation" : "vector<pii>"
		},
		
		{	
			"trigger":"vi", 
			"contents": "vector<int> ${1:v}($2);",
			"annotation" : "vector<int>"
		},
		
		{	
			"trigger":"vpii", 
			"contents": "vector<pii> ${1:vii}($2);",
			"annotation" : "vector<pii> vii(n)"
		},
		
		{
			"trigger":"si", 
			"contents": "set<int> ${1:st};",
			"annotation" : "set<int>"
		},
		
		
		{	
			"trigger":"mii", 
			"contents": "map<int,int> ${1:mp};",
			"annotation" : "map<int,int> mp"
		},
		
		{	
			"trigger":"mpii", 
			"contents": "map<int,pii> ${1:mp};",
			"annotation" : "map<int,pair<int,int>> mp"
		},
		
		
		{	
			"trigger":"msi", 
			"contents": "map<string,int> ${1:mp};", 
			"annotation" : "map<string,int> mp"
		},
		
		
		{	
			"trigger":"mi",
			"contents": "multiset<int> ${1:mst};", 
			"annotation" : "multiset<int> mst"
		},
		
		
		{	
			"trigger":"cout",
			"contents": "cout << $1 << \"${2:\\n}\";",
			"annotation" : "cout << << \"\n\" "
		}, 
		
		{	
			"trigger":"cerr << a << '\\n';",
			"contents": "cerr << $1 << \"${2:\\n}\";",
			"annotation" :"cerr << a << '\\n';"
		}, 
		
		{	
			"trigger":"cerr << a << ' ';",
			"contents": "cerr << $1 << ' ';",
			"annotation" : "cerr << a << ' ' "
		}, 
		
		{	
			"trigger":"maxHeap priority_queue",
			"contents": "priority_queue <int> maxHeap;",
			"annotation" : "priority_queue <int> maxHeap"
		}, 
		
		{	
			"trigger":"minHeap priority_queue",
			"contents": "priority_queue <int, vector<int>, greater<int> > minHeap;",
			"annotation" : "priority_queue <int, vector<int>, greater<int> > minHeap;"
		},
		
		{	
			"trigger":"minHeap priority_queue<pii>",
			"contents": "priority_queue <pii, vector<pii>, greater<pii>> minHeap;", 
			"annotation": "priority_queue <pii, vector<pii>, greater<pii>> minHeap;"	
		},
		
		{	
			"trigger":"maxHeap priority_queue",
			"contents": "priority_queue <pii> maxHeap;", 
			"annotation" : "priority_queue <pii> maxHeap;"
		}, 
		
		{	
			"trigger":"powerOf2",
			"contents": "\nbool powerOf2(int n){\n  if(n <= 0)return 0;\n  return (n & (n-1)) == 0;\n}",
			"annotation" : "powerOf2(n)"
		},
		{	
			"trigger":"numberOfSetBits",
			"contents": "int numberOfSetBits(int n){\n  return __builtin_popcountll(n);\n}",
			"annotation" : "numberOfSetBits(n):O(1)"
		},
		{	
			"trigger":"pii",
			"contents": "pii",
			"annotation" : "pii"
		},
		
		{
			"trigger":"sum accumulate(all(v), 0LL);",
			"contents": "accumulate(${1:v}.begin(), ${1:v}.end(), 0LL);", 
			"annotation" : "accumulate(all(v), 0LL);",
		},
		
		
		{
			"trigger":"string str; cin >> n",
			"contents": "string str; \ncin >> str;", 
			"annotation" : "string str; cin >> str;",
		},
		
		
		{
			"trigger":"priority_queue",
			"contents": "priority_queue<int, vector<int>, ${1:greater<int>}> ${2:pq};", 
			"annotation" : "Priority Queue",
		},
		

		{	
			"trigger":"sort(v.begin(), v.end());",
			"contents": "sort(${1:v}.begin(), ${1:v}.end());", 
			"annotation" : "sort(v.begin(), v.end();"
		},
		
		{	
			"trigger":"sort(v.begin(), v.end(), greater<>())",
			"contents": "sort(${1:v}.begin(), ${1:v}.end(), greater<>());", 
			"annotation" : "sort greater"
		},
		
		{	
			"trigger":"v.begin(), v.end()",
			"contents": "${1:v}.begin(), ${1:v}.end()", 
			"annotation" : "select all"
		},
		{	
			"trigger":"*min_element(v.begin(), v.end())",
			"contents": "*min_element(${1:v}.begin(), ${1:v}.end())", 
			"annotation" : "find minimum of all"
		},
		{	
			"trigger":"mst multiset<int> mst",
			"contents": "multiset<int> ${1:mst};", 
			"annotation" : "multiset<int> mst"
		},
		
		
		// ........................Programs....................
		
		{	
			"trigger":"input-vector",
			"contents": "int n; cin >> n;\nvector<int> v(n);\n\nfor(int i=0; i<n; ++i)\n\tcin >> v[i];",
			"annotation" : "int n; cin >> n;  vector<int> v(n); for(int i=0; i<n; ++i)\ncin >> v[i];"
		},
		{	
			"trigger":"input-vector",
			"contents": "int n, ${1:k};; \ncin >> n >> ${1:k};\nvector<int> v(n);\n\nfor(int i=0; i<n; ++i)\n\tcin >> v[i];",
			"annotation" : "int n, k; cin >> n >> k;  vector<int> v(n); for(int i=0; i<n; ++i)\ncin >> v[i];"
		},
		
		{	
			"trigger":"input-string",
			"contents": "int n; cin >> n;\nstring s; cin >> s;",
			"annotation" : "int n; cin >> n;string s; cin >> s"
		},
		{	
			"trigger":"input-matrix",
			"contents": "int n, m;  \ncin >> n >> m; \nvector<vector<int>>  mat(n, vector<int>(m, 0)); \nfor(int i=0; i < n; ++i){ \n    for (int j = 0; j < m; ++j){ \n        cin >> mat[i][j]; \n    } \n}", 
    		"annotation" : "int n, m; cin >> n >> m;  vector<vector<int>> mat; for(0-n){for(0-m){}}"
		},
		
		{	
			"trigger":"input-string-matrix as int-matrix",
			"contents":"\nint n, m;  \ncin >> n >> m; \n\nvector<vector<int>>  a(n, vector<int>(m, 0)); \n\nfor(int i=0; i < n; ++i){ \n    string s; cin >> s; \n    for (int j = 0; j < m; ++j){ \n        a[i][j] = (s[j])-'0';\n    } \n}", 
			"annotation" : "cin>>n>>m; for(i->n){ for(j->m){ a[i][j] = (s[j])-'0'; } }"
		},
		
		{	
			"trigger":"binary-search-isPossible int lo",
			"contents": "\nint lo = 0, hi = MOD; \n\n \nwhile(lo <= hi){	\n\t      int mid = lo+(hi-lo)/2; \n\t       \n\t      if(isPossible()){ \n\t        hi = mid-1; \n\t         \n\t      }else { \n\t        lo = mid+1; \n\t      } \n\t       \n}",
			"annotation" : "while(lo <= hi){  int mid = (lo + hi)/2;"
		},
		
		{	
			"trigger":"is_prime SieveOfEratosthenes",
			"contents": "\nint n; \nvector<bool> is_prime(n+1, true); \n \nis_prime[0] = is_prime[1] = false; \n \n \nfor (int i = 2; i <= n; i++) { \n\t    if (is_prime[i] && (long long)i * i <= n) { \n\t\t        for (int j = i * i; j <= n; j += i) \n\t\t\t         is_prime[j] = false; \n\t    } \n}",
			"annotation" : "is_prime Sieve of Eratosthenes"
		},
		
		
		{	
			"trigger":"GP Sum (a, r, n){",
			"contents": "\nint GP_Sum(int a, int r, int n){\n\t return ((a*binpow(r, n)) - a)/(r-1);\n}",
			"annotation" : "Sum of GP a^1 + a^2 + a^3 + ... + a^n"
		},
	]
}





